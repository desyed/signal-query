{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["class Signal<T> {\n  private _value: T;\n  private listeners: Set<() => void> = new Set();\n\n  constructor(initialValue: T) {\n    this._value = initialValue;\n  }\n\n  private track() {\n    if (Signal.currentListener) {\n      this.listeners.add(Signal.currentListener);\n    }\n  }\n\n  private trigger() {\n    this.listeners.forEach((listener) => listener());\n  }\n\n  get value(): T {\n    this.track();\n    return this._value;\n  }\n\n  set value(newValue: T) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      this.trigger();\n    }\n  }\n\n  static currentListener: (() => void) | null = null;\n}\n\nexport function createEffect(callback: () => void) {\n  const effect = () => {\n    Signal.currentListener = effect;\n    try {\n      callback();\n    } finally {\n      Signal.currentListener = null;\n    }\n  };\n  effect();\n}\n\ntype RequestConfig = {\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n  url: string;\n  headers?: Record<string, string>;\n  params?: Record<string, any>;\n  data?: any;\n  timeout?: number;\n  responseType?: \"json\" | \"text\" | \"stream\";\n  tags?: string[];\n};\n\ntype RequestResult<T> = {\n  isLoading: Signal<boolean>;\n  data: Signal<T | null>;\n  error: Signal<Error | null>;\n  isSuccess: Signal<boolean>;\n  isError: Signal<boolean>;\n};\n\nexport class SignalQuery {\n  private baseUrl: string;\n  private defaultHeaders: Record<string, string>;\n  private timeout: number;\n  private cache: Map<string, RequestResult<any>>;\n  private tags: Map<string, Set<string>>;\n\n  private constructor(config: { baseUrl: string; headers?: Record<string, string>; timeout?: number }) {\n    this.baseUrl = config.baseUrl;\n    this.defaultHeaders = config.headers || {};\n    this.timeout = config.timeout || 5000;\n    this.cache = new Map();\n    this.tags = new Map();\n  }\n\n  static create(config: { baseUrl: string; headers?: Record<string, string>; timeout?: number }) {\n    return new SignalQuery(config);\n  }\n\n  private buildUrlWithParams(url: string, params?: Record<string, any>): string {\n    if (!params) return url;\n    const queryString = Object.entries(params)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join(\"&\");\n    return `${url}?${queryString}`;\n  }\n\n  private fetchData(config: RequestConfig): XMLHttpRequest {\n    const { method = \"GET\", url, headers = {}, params, timeout, responseType } = config;\n    const finalUrl = this.buildUrlWithParams(`${this.baseUrl}${url}`, params);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, finalUrl, true);\n\n    Object.entries({ ...this.defaultHeaders, ...headers }).forEach(([key, value]) => {\n      xhr.setRequestHeader(key, value);\n    });\n\n    xhr.timeout = timeout || this.timeout;\n\n    if (responseType) {\n      xhr.responseType = responseType === 'stream' ? 'arraybuffer' : responseType;\n    }\n\n    return xhr;\n  }\n\n  get<T>(url: string, params?: Record<string, any>, headers?: Record<string, string>, responseType?: \"json\" | \"text\" | \"stream\", tags?: string[]): RequestResult<T> {\n    const cacheKey = `${url}?${new URLSearchParams(params).toString()}`;\n    \n    if (!this.cache.has(cacheKey)) {\n      const result: RequestResult<T> = {\n        isLoading: new Signal<boolean>(true),\n        data: new Signal<T | null>(null),\n        error: new Signal<Error | null>(null),\n        isSuccess: new Signal<boolean>(false),\n        isError: new Signal<boolean>(false),\n      };\n      this.cache.set(cacheKey, result);\n\n      if (tags) {\n        tags.forEach(tag => {\n          if (!this.tags.has(tag)) {\n            this.tags.set(tag, new Set());\n          }\n          this.tags.get(tag)?.add(cacheKey);\n        });\n      }\n\n      const xhr = this.fetchData({ method: \"GET\", url, params, headers, responseType });\n\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          result.isLoading.value = false;\n          result.isSuccess.value = true;\n          result.data.value = xhr.response;\n        } else {\n          result.isLoading.value = false;\n          result.isError.value = true;\n          result.error.value = new Error(`HTTP error! status: ${xhr.status}`);\n        }\n      };\n\n      xhr.onerror = () => {\n        result.isLoading.value = false;\n        result.isError.value = true;\n        result.error.value = new Error('Network error occurred');\n      };\n\n      xhr.ontimeout = () => {\n        result.isLoading.value = false;\n        result.isError.value = true;\n        result.error.value = new Error('Request timed out');\n      };\n\n      xhr.send();\n    }\n\n    return this.cache.get(cacheKey)!;\n  }\n\n  post<T>(url: string, data?: any, headers?: Record<string, string>, tags?: string[]): RequestResult<T> {\n    return this.request<T>({ method: \"POST\", url, data, headers, tags });\n  }\n\n  put<T>(url: string, data?: any, headers?: Record<string, string>, tags?: string[]): RequestResult<T> {\n    return this.request<T>({ method: \"PUT\", url, data, headers, tags });\n  }\n\n  delete<T>(url: string, params?: Record<string, any>, headers?: Record<string, string>, tags?: string[]): RequestResult<T> {\n    return this.request<T>({ method: \"DELETE\", url, params, headers, tags });\n  }\n\n  private request<T>(config: RequestConfig): RequestResult<T> {\n    const result: RequestResult<T> = {\n      isLoading: new Signal<boolean>(true),\n      data: new Signal<T | null>(null),\n      error: new Signal<Error | null>(null),\n      isSuccess: new Signal<boolean>(false),\n      isError: new Signal<boolean>(false),\n    };\n\n    const xhr = this.fetchData(config);\n\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        result.isLoading.value = false;\n        result.isSuccess.value = true;\n        result.data.value = xhr.response;\n\n        if (config.tags) {\n          this.revalidateTags(config.tags);\n        }\n      } else {\n        result.isLoading.value = false;\n        result.isError.value = true;\n        result.error.value = new Error(`HTTP error! status: ${xhr.status}`);\n      }\n    };\n\n    xhr.onerror = () => {\n      result.isLoading.value = false;\n      result.isError.value = true;\n      result.error.value = new Error('Network error occurred');\n    };\n\n    xhr.ontimeout = () => {\n      result.isLoading.value = false;\n      result.isError.value = true;\n      result.error.value = new Error('Request timed out');\n    };\n\n    xhr.send(config.data ? JSON.stringify(config.data) : undefined);\n\n    return result;\n  }\n\n  private revalidateTags(tags: string[]) {\n    tags.forEach(tag => {\n      const cacheKeys = this.tags.get(tag);\n      if (cacheKeys) {\n        cacheKeys.forEach(key => {\n          const cachedResult = this.cache.get(key);\n          if (cachedResult) {\n            const [url, paramsString] = key.split('?');\n            const params = this.getParams(paramsString);\n            const xhr = this.fetchData({ method: \"GET\", url, params });\n\n            xhr.onload = () => {\n              if (xhr.status >= 200 && xhr.status < 300) {\n                cachedResult.data.value = xhr.response;\n                cachedResult.isSuccess.value = true;\n                cachedResult.isError.value = false;\n                cachedResult.error.value = null;\n              } else {\n                cachedResult.isError.value = true;\n                cachedResult.error.value = new Error(`HTTP error! status: ${xhr.status}`);\n              }\n            };\n\n            xhr.onerror = () => {\n              cachedResult.isError.value = true;\n              cachedResult.error.value = new Error('Network error occurred');\n            };\n\n            xhr.send();\n          }\n        });\n      }\n    });\n  }\n\n  private getParams(queryString: string): Record<string, any> {\n    const params: Record<string, any> = {};\n    if (queryString) {\n      queryString.split('&').forEach(param => {\n        const [k, v] = param.split('=');\n        params[decodeURIComponent(k)] = decodeURIComponent(v);\n      });\n    }\n    return params;\n  }\n}\n"],"names":["_Signal","initialValue","__publicField","listener","newValue","Signal","createEffect","callback","effect","SignalQuery","config","url","params","queryString","key","value","method","headers","timeout","responseType","finalUrl","xhr","tags","cacheKey","result","tag","_a","data","cacheKeys","cachedResult","paramsString","param","k","v"],"mappings":"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"}