{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["class Signal<T> {\n  private _value: T;\n  private listeners: Set<() => void> = new Set();\n\n  constructor(initialValue: T) {\n    this._value = initialValue;\n  }\n\n  private track() {\n    if (Signal.currentListener) {\n      this.listeners.add(Signal.currentListener);\n    }\n  }\n\n  private trigger() {\n    this.listeners.forEach((listener) => listener());\n  }\n\n  get value(): T {\n    this.track();\n    return this._value;\n  }\n\n  set value(newValue: T) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      this.trigger();\n    }\n  }\n\n  static currentListener: (() => void) | null = null;\n}\n\nexport function createEffect(callback: () => void) {\n  const effect = () => {\n    Signal.currentListener = effect;\n    try {\n      callback();\n    } finally {\n      Signal.currentListener = null;\n    }\n  };\n  effect();\n}\n\ntype RequestConfig = {\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n  url: string;\n  headers?: Record<string, string>;\n  params?: Record<string, any>;\n  data?: any;\n  timeout?: number;\n  responseType?: \"json\" | \"text\" | \"stream\";\n  tags?: string[];\n};\n\ntype RequestResult<T> = {\n  isLoading: Signal<boolean>;\n  data: Signal<T | null>;\n  error: Signal<Error | null>;\n  isSuccess: Signal<boolean>;\n  isError: Signal<boolean>;\n};\n\nexport class SignalQuery {\n  private baseUrl: string;\n  private defaultHeaders: Record<string, string>;\n  private timeout: number;\n  private cache: Map<string, RequestResult<any>>;\n  private tags: Map<string, Set<string>>;\n\n  private constructor(config: { baseUrl: string; headers?: Record<string, string>; timeout?: number }) {\n    this.baseUrl = config.baseUrl;\n    this.defaultHeaders = config.headers || {};\n    this.timeout = config.timeout || 5000;\n    this.cache = new Map();\n    this.tags = new Map();\n  }\n\n  static create(config: { baseUrl: string; headers?: Record<string, string>; timeout?: number }) {\n    return new SignalQuery(config);\n  }\n\n  private buildUrlWithParams(url: string, params?: Record<string, any>): string {\n    if (!params) return url;\n    const queryString = Object.entries(params)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join(\"&\");\n    return `${url}?${queryString}`;\n  }\n\n  private fetchData(config: RequestConfig): XMLHttpRequest {\n    const { method = \"GET\", url, headers = {}, params, timeout, responseType } = config;\n    const finalUrl = this.buildUrlWithParams(`${this.baseUrl}${url}`, params);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, finalUrl, true);\n\n    Object.entries({ ...this.defaultHeaders, ...headers }).forEach(([key, value]) => {\n      xhr.setRequestHeader(key, value);\n    });\n\n    xhr.timeout = timeout || this.timeout;\n\n    if (responseType) {\n      xhr.responseType = responseType === 'stream' ? 'arraybuffer' : responseType;\n    }\n\n    return xhr;\n  }\n\n  get<T>(url: string, params?: Record<string, any>, headers?: Record<string, string>, responseType?: \"json\" | \"text\" | \"stream\", tags?: string[]): RequestResult<T> {\n    const cacheKey = `${url}?${new URLSearchParams(params).toString()}`;\n    \n    if (!this.cache.has(cacheKey)) {\n      const result: RequestResult<T> = {\n        isLoading: new Signal<boolean>(true),\n        data: new Signal<T | null>(null),\n        error: new Signal<Error | null>(null),\n        isSuccess: new Signal<boolean>(false),\n        isError: new Signal<boolean>(false),\n      };\n      this.cache.set(cacheKey, result);\n\n      if (tags) {\n        tags.forEach(tag => {\n          if (!this.tags.has(tag)) {\n            this.tags.set(tag, new Set());\n          }\n          this.tags.get(tag)?.add(cacheKey);\n        });\n      }\n\n      const xhr = this.fetchData({ method: \"GET\", url, params, headers, responseType });\n\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          result.isLoading.value = false;\n          result.isSuccess.value = true;\n          result.data.value = xhr.response;\n        } else {\n          result.isLoading.value = false;\n          result.isError.value = true;\n          result.error.value = new Error(`HTTP error! status: ${xhr.status}`);\n        }\n      };\n\n      xhr.onerror = () => {\n        result.isLoading.value = false;\n        result.isError.value = true;\n        result.error.value = new Error('Network error occurred');\n      };\n\n      xhr.ontimeout = () => {\n        result.isLoading.value = false;\n        result.isError.value = true;\n        result.error.value = new Error('Request timed out');\n      };\n\n      xhr.send();\n    }\n\n    return this.cache.get(cacheKey)!;\n  }\n\n  post<T>(url: string, data?: any, headers?: Record<string, string>, tags?: string[]): RequestResult<T> {\n    return this.request<T>({ method: \"POST\", url, data, headers, tags });\n  }\n\n  put<T>(url: string, data?: any, headers?: Record<string, string>, tags?: string[]): RequestResult<T> {\n    return this.request<T>({ method: \"PUT\", url, data, headers, tags });\n  }\n\n  delete<T>(url: string, params?: Record<string, any>, headers?: Record<string, string>, tags?: string[]): RequestResult<T> {\n    return this.request<T>({ method: \"DELETE\", url, params, headers, tags });\n  }\n\n  private request<T>(config: RequestConfig): RequestResult<T> {\n    const result: RequestResult<T> = {\n      isLoading: new Signal<boolean>(true),\n      data: new Signal<T | null>(null),\n      error: new Signal<Error | null>(null),\n      isSuccess: new Signal<boolean>(false),\n      isError: new Signal<boolean>(false),\n    };\n\n    const xhr = this.fetchData(config);\n\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        result.isLoading.value = false;\n        result.isSuccess.value = true;\n        result.data.value = xhr.response;\n\n        if (config.tags) {\n          this.revalidateTags(config.tags);\n        }\n      } else {\n        result.isLoading.value = false;\n        result.isError.value = true;\n        result.error.value = new Error(`HTTP error! status: ${xhr.status}`);\n      }\n    };\n\n    xhr.onerror = () => {\n      result.isLoading.value = false;\n      result.isError.value = true;\n      result.error.value = new Error('Network error occurred');\n    };\n\n    xhr.ontimeout = () => {\n      result.isLoading.value = false;\n      result.isError.value = true;\n      result.error.value = new Error('Request timed out');\n    };\n\n    xhr.send(config.data ? JSON.stringify(config.data) : undefined);\n\n    return result;\n  }\n\n  private revalidateTags(tags: string[]) {\n    tags.forEach(tag => {\n      const cacheKeys = this.tags.get(tag);\n      if (cacheKeys) {\n        cacheKeys.forEach(key => {\n          const cachedResult = this.cache.get(key);\n          if (cachedResult) {\n            const [url, paramsString] = key.split('?');\n            const params = this.getParams(paramsString);\n            const xhr = this.fetchData({ method: \"GET\", url, params });\n\n            xhr.onload = () => {\n              if (xhr.status >= 200 && xhr.status < 300) {\n                cachedResult.data.value = xhr.response;\n                cachedResult.isSuccess.value = true;\n                cachedResult.isError.value = false;\n                cachedResult.error.value = null;\n              } else {\n                cachedResult.isError.value = true;\n                cachedResult.error.value = new Error(`HTTP error! status: ${xhr.status}`);\n              }\n            };\n\n            xhr.onerror = () => {\n              cachedResult.isError.value = true;\n              cachedResult.error.value = new Error('Network error occurred');\n            };\n\n            xhr.send();\n          }\n        });\n      }\n    });\n  }\n\n  private getParams(queryString: string): Record<string, any> {\n    const params: Record<string, any> = {};\n    if (queryString) {\n      queryString.split('&').forEach(param => {\n        const [k, v] = param.split('=');\n        params[decodeURIComponent(k)] = decodeURIComponent(v);\n      });\n    }\n    return params;\n  }\n}\n"],"names":["_Signal","initialValue","__publicField","listener","newValue","Signal","createEffect","callback","effect","SignalQuery","config","url","params","queryString","key","value","method","headers","timeout","responseType","finalUrl","xhr","tags","cacheKey","result","tag","_a","data","cacheKeys","cachedResult","paramsString","param","k","v"],"mappings":"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"}